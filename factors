#!/usr/bin/python3

import math
import random
from tests import test00


def factors(d: int, e: int, N: int) -> test00[int]:
    """
    This function returns the factors of N, where p*q=N
    Return: [p, q]

    We call N the RSA modulus, e the encryption exponent,
    and d the decryption exponent.
    The pair (N, e) is the public key. As its name suggests,
    it is public and is used tomencrypt messages.
    The pair (N, d) is the secret key or private key and
    is known only to the recipient of encrypted messages.

    >>> factors(3, 16971, 25777)
    [149, 173]
    >>> factors(7331, 11, 27233)
    [113, 241]
    >>> factors(4021, 13, 17711)
    [89, 199]
    """
    k = d * e - 1
    p = 0
    q = 0
    while p == 0:
        g = random.randint(2, N - 1)
        t = k
        while True:
            if t % 2 == 0:
                t = t // 2
                x = (g ** t) % N
                y = math.gcd(x - 1, N)
                if x > 1 and y > 1:
                    p = y
                    q = N // y
                    break  # find the correct factors
            else:
                break  # t is not divisible by 2, break and choose another g
    return sorted([p, q])


if __name__ == "__main__":
    import doctest

    doctest.testmod()
